// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Customer {
  id       String @id @default(uuid())
  email    String @unique
  password String
  phone    String
  role     Int

  firstName String?
  lastName  String?
  fullName  String?
  gender    Int?
  birthday  String?

  isDelete  Boolean?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  address  CustomerAddress?
  image    Image?
  cart     Cart?
  auth     Auth?
  orders   Order[]
  comments Comment[]
  rates    Rate[]
  likes    Like[]
}

model CustomerAddress {
  id            String @id @default(uuid())
  addressEn     String
  addressVn     String
  fullAddressEn String
  fullAddressVn String
  cityCode      Int
  districtCode  Int
  wardCode      Int

  isDelete  Boolean?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  customerId String   @unique
  customer   Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
}

model Auth {
  id        String   @id @default(uuid())
  token     String   @db.VarChar(3000)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  customerId String   @unique
  customer   Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
}

model Category {
  id     String @id @default(uuid())
  nameEn String
  nameVn String

  isDelete  Boolean?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  image         Image?
  subCategories SubCategory[]
  products      Product[]
}

model SubCategory {
  id     String @id @default(uuid())
  nameEn String
  nameVn String

  isDelete  Boolean?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  categoryId String
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  image    Image?
  products Product[]
}

model Product {
  id              String  @id @default(uuid())
  nameEn          String
  nameVn          String
  unit            Int
  costPrice       Int
  profit          Int
  totalPrice      Int
  status          Int
  inventory       Int
  inventoryStatus Int
  origin          Int
  supplier        String
  isNew           Boolean

  isDelete  Boolean?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  categoryId    String
  category      Category    @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  subCategoryId String
  subCategory   SubCategory @relation(fields: [subCategoryId], references: [id], onDelete: Cascade)

  image    Image?
  items    OrderItem[]
  cartItem CartItem[]
  comments Comment[]
  rates    Rate[]
  likes    Like[]
}

model Cart {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  isDelete Boolean?

  customerId String   @unique
  customer   Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)

  items CartItem[]
}

model CartItem {
  id        String   @id @default(uuid())
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  isDelete Boolean?

  cartId    String
  cart      Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Order {
  id            String @id @default(uuid())
  orderNumber   String
  status        Int
  paymentMethod Int
  paymentStatus Int
  recievedType  Int
  shipmentFee   Int
  totalPayment  Int

  note      String?  @db.VarChar(3000)
  isDelete  Boolean?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  customerId String
  customer   Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)

  shipment Shipment?
  items    OrderItem[]
}

model OrderItem {
  id       String @id @default(uuid())
  quantity Int

  isDelete  Boolean?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  orderId   String
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([orderId])
  @@index([productId])
}

model Shipment {
  id       String @id @default(uuid())
  fullName String
  phone    String
  email    String
  address  String

  shipmentNumber String?
  isDelete       Boolean?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  orderId String @unique
  order   Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

model City {
  id     String @id @default(uuid())
  nameEn String
  nameVn String
  code   Int

  isDelete  Boolean?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model District {
  id       String @id @default(uuid())
  nameEn   String
  nameVn   String
  code     Int
  cityCode Int

  isDelete  Boolean?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Ward {
  id           String @id @default(uuid())
  nameEn       String
  nameVn       String
  code         Int
  districtCode Int

  isDelete  Boolean?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Comment {
  id       String @id @default(uuid())
  parentId String
  content  String @db.VarChar(3000)

  isDelete  Boolean?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  customerId String
  customer   Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  productId  String
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Rate {
  id    String @id @default(uuid())
  point Int
  note  String @db.VarChar(3000)

  isDelete  Boolean?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  customerId String
  customer   Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  productId  String
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Like {
  id        String   @id @default(uuid())
  isDelete  Boolean?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  customerId String
  customer   Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  productId  String
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Image {
  id       String @id @default(uuid())
  path     String
  size     Int
  publicId String

  isDelete  Boolean?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  customerId    String?      @unique
  customer      Customer?    @relation(fields: [customerId], references: [id], onDelete: Cascade)
  categoryId    String?      @unique
  category      Category?    @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  subCategoryId String?      @unique
  subCategory   SubCategory? @relation(fields: [subCategoryId], references: [id], onDelete: Cascade)
  productId     String?      @unique
  product       Product?     @relation(fields: [productId], references: [id], onDelete: Cascade)
}
